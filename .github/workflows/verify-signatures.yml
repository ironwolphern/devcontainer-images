name: 'Image Signature Verification'

on:
  schedule:
    # Verify signatures daily at 6:00 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      image:
        description: 'Specific image to verify (ansible, python, terraform, go, or all)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - ansible
          - python
          - terraform
          - go
      tag:
        description: 'Image tag to verify'
        required: false
        default: 'latest'
        type: string

env:
  REGISTRY: ghcr.io

permissions:
  contents: read
  security-events: write

jobs:
  verify-signatures:
    name: 'Verify Image Signatures'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [ansible, python, terraform, go]
      fail-fast: false

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Check if image should be verified'
        id: should_verify
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            IMAGE="${{ github.event.inputs.image }}"
            if [[ "$IMAGE" == "all" || "$IMAGE" == "${{ matrix.image }}" ]]; then
              echo "verify=true" >> $GITHUB_OUTPUT
            else
              echo "verify=false" >> $GITHUB_OUTPUT
            fi
          else
            # Scheduled run - verify all images
            echo "verify=true" >> $GITHUB_OUTPUT
          fi

      - name: 'Install Cosign'
        if: steps.should_verify.outputs.verify == 'true'
        uses: sigstore/cosign-installer@v3

      - name: 'Set image tag'
        if: steps.should_verify.outputs.verify == 'true'
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="latest"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: 'Verify image signature'
        if: steps.should_verify.outputs.verify == 'true'
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          IMAGE_REF="${{ env.REGISTRY }}/${{ github.repository }}/devcontainer-${{ matrix.image }}:${{ steps.tag.outputs.tag }}"

          echo "🔍 Verifying signature for: $IMAGE_REF"

          # Verify that the image exists
          if ! docker manifest inspect "$IMAGE_REF" > /dev/null 2>&1; then
            echo "⚠️ Image not found: $IMAGE_REF"
            exit 0
          fi

          # Verificar firma
          cosign verify \
            --certificate-identity-regexp="^https://github.com/${{ github.repository }}" \
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \
            "$IMAGE_REF" || {
              echo "❌ Signature verification failed for $IMAGE_REF"
              echo "::error::Image signature verification failed for $IMAGE_REF"
              exit 1
            }

          echo "✅ Signature verified successfully for ${{ matrix.image }}:${{ steps.tag.outputs.tag }}"

      - name: 'Verify SBOM attestation'
        if: steps.should_verify.outputs.verify == 'true'
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          IMAGE_REF="${{ env.REGISTRY }}/${{ github.repository }}/devcontainer-${{ matrix.image }}:${{ steps.tag.outputs.tag }}"

          echo "🔍 Verifying SBOM for: $IMAGE_REF"

          # Verificar SBOM
          cosign verify-attestation \
            --certificate-identity-regexp="^https://github.com/${{ github.repository }}" \
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \
            --type spdxjson \
            "$IMAGE_REF" || {
              echo "❌ SBOM verification failed for $IMAGE_REF"
              echo "::error::SBOM verification failed for $IMAGE_REF"
              exit 1
            }

          echo "✅ SBOM verified successfully for ${{ matrix.image }}:${{ steps.tag.outputs.tag }}"

      - name: 'Download and analyze SBOM'
        if: steps.should_verify.outputs.verify == 'true'
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          IMAGE_REF="${{ env.REGISTRY }}/${{ github.repository }}/devcontainer-${{ matrix.image }}:${{ steps.tag.outputs.tag }}"

          echo "📋 Downloading SBOM for analysis..."

          # Descargar SBOM
          cosign download attestation \
            --certificate-identity-regexp="^https://github.com/${{ github.repository }}" \
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \
            "$IMAGE_REF" > sbom-${{ matrix.image }}.json

          # Extraer el SBOM del attestation
          jq -r '.payload' sbom-${{ matrix.image }}.json | base64 -d | jq -r '.predicate' > sbom-${{ matrix.image }}-decoded.json

          # Analizar contenido del SBOM
          PACKAGE_COUNT=$(jq '.packages | length' sbom-${{ matrix.image }}-decoded.json)
          echo "📦 Packages found in SBOM: $PACKAGE_COUNT"

          # Buscar vulnerabilidades conocidas (ejemplo básico)
          echo "🔍 Analyzing critical packages..."
          jq -r '.packages[] | select(.name != null) | .name' sbom-${{ matrix.image }}-decoded.json | sort | uniq > packages-${{ matrix.image }}.txt

          echo "✅ SBOM analyzed - $(wc -l < packages-${{ matrix.image }}.txt) unique packages"

      - name: 'Upload SBOM artifacts'
        if: steps.should_verify.outputs.verify == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.image }}-${{ steps.tag.outputs.tag }}
          path: |
            sbom-${{ matrix.image }}-decoded.json
            packages-${{ matrix.image }}.txt
          retention-days: 30

  summary:
    name: 'Verification Summary'
    runs-on: ubuntu-latest
    needs: verify-signatures
    if: always()

    steps:
      - name: 'Create verification summary'
        run: |
          echo "## 🔐 Image Signature Verification Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Verification Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Image | Verification Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Ansible | ${{ needs.verify-signatures.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python | ${{ needs.verify-signatures.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform | ${{ needs.verify-signatures.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Go | ${{ needs.verify-signatures.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.verify-signatures.result }}" == "success" ]]; then
            echo "✅ **All signatures verified successfully**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some signature verifications failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the individual job logs for details." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 SBOM Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "SBOM files have been uploaded as artifacts for analysis." >> $GITHUB_STEP_SUMMARY

      - name: 'Notify on failure'
        if: needs.verify-signatures.result == 'failure'
        run: |
          echo "::error::Signature verification failed for one or more images"
          echo "Please investigate the signature integrity of the container images"
