name: 'Release'

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write
  packages: write
  security-events: write
  id-token: write  # Necesario para keyless signing con Cosign

jobs:
  release:
    name: 'Release Images'
    runs-on: ubuntu-latest
    timeout-minutes: 40  # Timeout de 40 minutos para el job de release
    strategy:
      max-parallel: 2  # Ejecutar imágenes de forma secuencial
      matrix:
        image: [ansible, python, terraform, go]
        include:
          - image: ansible
            build_args: |
              PYTHON_VERSION=3.13
          - image: python
            build_args: |
              PYTHON_VERSION=3.13
          - image: terraform
            build_args: |
              ALPINE_VERSION=3.22
              TERRAFORM_VERSION=1.12.2
              TERRAGRUNT_VERSION=0.83.2
              TFLINT_VERSION=0.58.1
              CHECKOV_VERSION=3.2.451
          - image: go
            build_args: |
              GO_VERSION=1.24
              ALPINE_VERSION=3.22

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Set up QEMU'
        uses: docker/setup-qemu-action@v3

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Install Cosign'
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.4.0'

      - name: 'Login to Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: 'Extract version'
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG=${GITHUB_REF#refs/tags/}
          fi
          VERSION=${TAG#v}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 'Extract metadata'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/devcontainer-${{ matrix.image }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.version.outputs.version }}
            type=sha,format=long

      - name: 'Build and push release image'
        uses: docker/build-push-action@v6
        id: build
        with:
          context: ./images/${{ matrix.image }}
          platforms: linux/amd64,linux/arm64
          build-args: ${{ matrix.build_args }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true

      - name: 'Sign release image with Cosign'
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "🔐 Firmando imagen de release con Cosign..."

          # Firmar todas las tags (latest y version)
          for tag in $(echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n'); do
            if [[ -n "$tag" && "$tag" != " " ]]; then
              echo "📝 Firmando release: $tag"
              cosign sign --yes "$tag" || {
                echo "❌ Error firmando $tag"
                exit 1
              }
            fi
          done

          # Firmar con el digest específico si está disponible
          if [[ -n "${{ steps.build.outputs.digest }}" ]]; then
            IMAGE_WITH_DIGEST="${{ env.REGISTRY }}/${{ github.repository }}/devcontainer-${{ matrix.image }}@${{ steps.build.outputs.digest }}"
            echo "📝 Firmando con digest: $IMAGE_WITH_DIGEST"
            cosign sign --yes "$IMAGE_WITH_DIGEST"
          fi

          echo "✅ Imagen de release firmada exitosamente"

      - name: 'Generate and attest release SBOM'
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "📋 Generando SBOM para release..."

          # Instalar syft si no está disponible
          if ! command -v syft &> /dev/null; then
            curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          fi

          LATEST_IMAGE="${{ env.REGISTRY }}/${{ github.repository }}/devcontainer-${{ matrix.image }}:latest"
          VERSION_IMAGE="${{ env.REGISTRY }}/${{ github.repository }}/devcontainer-${{ matrix.image }}:${{ steps.version.outputs.version }}"

          # Generar SBOM para la imagen versionada
          syft "$VERSION_IMAGE" -o spdx-json=sbom-release-${{ matrix.image }}.spdx.json

          # Atestar SBOM para ambas tags
          echo "🔗 Atestando SBOM para release..."
          cosign attest --yes --predicate sbom-release-${{ matrix.image }}.spdx.json --type spdxjson "$VERSION_IMAGE"
          cosign attest --yes --predicate sbom-release-${{ matrix.image }}.spdx.json --type spdxjson "$LATEST_IMAGE"

          echo "✅ SBOM de release generado y atestado"

      - name: 'Run security scan'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/devcontainer-${{ matrix.image }}:${{ steps.version.outputs.version }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.image }}-${{ steps.version.outputs.version }}.sarif'

      - name: 'Upload Trivy scan results'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.image }}-${{ steps.version.outputs.version }}.sarif'

      - name: 'Verify release signatures'
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "🔍 Verificando firmas de release..."

          LATEST_IMAGE="${{ env.REGISTRY }}/${{ github.repository }}/devcontainer-${{ matrix.image }}:latest"
          VERSION_IMAGE="${{ env.REGISTRY }}/${{ github.repository }}/devcontainer-${{ matrix.image }}:${{ steps.version.outputs.version }}"

          # Verificar firma de la imagen versionada
          echo "🔍 Verificando imagen versionada: $VERSION_IMAGE"
          cosign verify \
            --certificate-identity-regexp="^https://github.com/${{ github.repository }}" \
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \
            "$VERSION_IMAGE" || {
              echo "❌ Verificación de firma fallida para $VERSION_IMAGE"
              exit 1
            }

          # Verificar firma de latest
          echo "🔍 Verificando imagen latest: $LATEST_IMAGE"
          cosign verify \
            --certificate-identity-regexp="^https://github.com/${{ github.repository }}" \
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \
            "$LATEST_IMAGE" || {
              echo "❌ Verificación de firma fallida para $LATEST_IMAGE"
              exit 1
            }

          # Verificar SBOM
          # echo "🔍 Verificando SBOM..."
          # cosign verify-attestation \
          #   --certificate-identity-regexp="^https://github.com/${{ github.repository }}" \
          #   --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \
          #   --type spdxjson \
          #   "$VERSION_IMAGE" || {
          #     echo "❌ Verificación de SBOM fallida para $VERSION_IMAGE"
          #     exit 1
          #   }
          echo "✅ Todas las firmas y SBOM verificadas exitosamente para ${{ matrix.image }}"

  create-release:
    name: 'Create GitHub Release'
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Timeout de 10 minutos para el job de creación de release
    needs: release

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Extract version'
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG=${GITHUB_REF#refs/tags/}
          fi
          VERSION=${TAG#v}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 'Generate release notes'
        id: release_notes
        run: |
          cat > release_notes.md << EOF
          # DevContainer Images ${{ steps.version.outputs.tag }}

          ## 🐳 Available Images

          All images are available with the following tags:
          - \`latest\`
          - \`${{ steps.version.outputs.version }}\`

          ## 🔐 Security & Verification

          ### Image Signatures
          All images are signed with [Cosign](https://docs.sigstore.dev/cosign/overview/) using keyless signing:

          \`\`\`bash
          # Verify image signature
          cosign verify \\
            --certificate-identity-regexp="^https://github.com/${{ github.repository }}" \\
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \\
            ghcr.io/${{ github.repository }}/devcontainer-[IMAGE]:${{ steps.version.outputs.version }}
          \`\`\`

          ### Software Bill of Materials (SBOM)
          Each image includes an attested SBOM in SPDX format:

          \`\`\`bash
          # Verify SBOM attestation
          cosign verify-attestation \\
            --certificate-identity-regexp="^https://github.com/${{ github.repository }}" \\
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \\
            --type spdxjson \\
            ghcr.io/${{ github.repository }}/devcontainer-[IMAGE]:${{ steps.version.outputs.version }}
          \`\`\`

          ### Security Scanning
          All images are scanned with [Trivy](https://github.com/aquasecurity/trivy) for vulnerabilities.

          ### Ansible DevContainer
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}/devcontainer-ansible:${{ steps.version.outputs.version }}
          \`\`\`

          ### Python DevContainer
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}/devcontainer-python:${{ steps.version.outputs.version }}
          \`\`\`

          ### Terraform DevContainer
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}/devcontainer-terraform:${{ steps.version.outputs.version }}
          \`\`\`

          ### Go DevContainer
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}/devcontainer-go:${{ steps.version.outputs.version }}
          \`\`\`

          ## 🔧 Version Information

          - **Python**: 3.13
          - **Go**: 1.24
          - **Terraform**: 1.12.2
          - **Alpine**: 3.22

          ## 🛡️ Security

          All images have been scanned with Trivy and include security analysis tools.

          ## 📚 Documentation

          See the [README](https://github.com/${{ github.repository }}) for usage instructions.
          EOF

          echo "notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: 'Create Release'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');

            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ steps.version.outputs.tag }}',
              name: 'DevContainer Images ${{ steps.version.outputs.tag }}',
              body: releaseNotes,
              draft: false,
              prerelease: false
            });
