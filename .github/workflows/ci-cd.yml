name: 'CI/CD Pipeline'

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'images/**'
      - '.github/workflows/**'
      - 'Makefile'
  pull_request:
    branches: [ main ]
    paths:
      - 'images/**'
      - '.github/workflows/**'
      - 'Makefile'
  workflow_dispatch:
    inputs:
      image:
        description: 'Specific image to build (ansible, python, terraform, go, or all)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - ansible
          - python
          - terraform
          - go
      push_images:
        description: 'Push images to registry'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  id-token: write  # Necesario para keyless signing con Cosign

jobs:
  detect-changes:
    name: 'Detect Changes'
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Timeout de 5 minutos para detección de cambios
    outputs:
      ansible: ${{ steps.changes.outputs.ansible }}
      python: ${{ steps.changes.outputs.python }}
      terraform: ${{ steps.changes.outputs.terraform }}
      go: ${{ steps.changes.outputs.go }}
      any: ${{ steps.changes.outputs.any }}

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Detect changes'
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual trigger - build specified image(s)
            IMAGE="${{ github.event.inputs.image }}"
            if [[ "$IMAGE" == "all" ]]; then
              echo "ansible=true" >> $GITHUB_OUTPUT
              echo "python=true" >> $GITHUB_OUTPUT
              echo "terraform=true" >> $GITHUB_OUTPUT
              echo "go=true" >> $GITHUB_OUTPUT
            else
              echo "ansible=$([[ '$IMAGE' == 'ansible' ]] && echo true || echo false)" >> $GITHUB_OUTPUT
              echo "python=$([[ '$IMAGE' == 'python' ]] && echo true || echo false)" >> $GITHUB_OUTPUT
              echo "terraform=$([[ '$IMAGE' == 'terraform' ]] && echo true || echo false)" >> $GITHUB_OUTPUT
              echo "go=$([[ '$IMAGE' == 'go' ]] && echo true || echo false)" >> $GITHUB_OUTPUT
            fi
            echo "any=true" >> $GITHUB_OUTPUT
          else
            # Automatic trigger - detect changes
            if git diff --name-only HEAD~1 HEAD | grep -q "images/ansible/"; then
              echo "ansible=true" >> $GITHUB_OUTPUT
            else
              echo "ansible=false" >> $GITHUB_OUTPUT
            fi

            if git diff --name-only HEAD~1 HEAD | grep -q "images/python/"; then
              echo "python=true" >> $GITHUB_OUTPUT
            else
              echo "python=false" >> $GITHUB_OUTPUT
            fi

            if git diff --name-only HEAD~1 HEAD | grep -q "images/terraform/"; then
              echo "terraform=true" >> $GITHUB_OUTPUT
            else
              echo "terraform=false" >> $GITHUB_OUTPUT
            fi

            if git diff --name-only HEAD~1 HEAD | grep -q "images/go/"; then
              echo "go=true" >> $GITHUB_OUTPUT
            else
              echo "go=false" >> $GITHUB_OUTPUT
            fi

            # Check if any image changed
            if git diff --name-only HEAD~1 HEAD | grep -q "images/"; then
              echo "any=true" >> $GITHUB_OUTPUT
            else
              echo "any=false" >> $GITHUB_OUTPUT
            fi
          fi

  lint-dockerfiles:
    name: 'Lint Dockerfiles'
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Timeout de 10 minutos para linting
    needs: detect-changes
    if: needs.detect-changes.outputs.any == 'true'

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Run Hadolint'
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: 'images/*/Dockerfile'
          recursive: true
          failure-threshold: warning

  build-and-test:
    name: 'Build and Test'
    runs-on: ubuntu-latest
    timeout-minutes: 40  # 40 minute timeout for build and test (the longest)
    needs: [detect-changes, lint-dockerfiles]
    if: needs.detect-changes.outputs.any == 'true'
    strategy:
      max-parallel: 2  # Ejecutar imágenes de forma secuencial
      matrix:
        image: [ansible, python, terraform, go]
        include:
          - image: ansible
            build_args: |
              PYTHON_VERSION=3.13
          - image: python
            build_args: |
              PYTHON_VERSION=3.13
          - image: terraform
            build_args: |
              ALPINE_VERSION=3.22
              TERRAFORM_VERSION=1.12.2
              TERRAGRUNT_VERSION=0.83.2
              TFLINT_VERSION=0.58.1
              CHECKOV_VERSION=3.2.451
          - image: go
            build_args: |
              GO_VERSION=1.24
              ALPINE_VERSION=3.22
      fail-fast: false

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Check if image should be built'
        id: should_build
        run: |
          if [[ "${{ needs.detect-changes.outputs[matrix.image] }}" == "true" ]]; then
            echo "build=true" >> $GITHUB_OUTPUT
          else
            echo "build=false" >> $GITHUB_OUTPUT
          fi

      - name: 'Set up QEMU'
        uses: docker/setup-qemu-action@v3

      - name: 'Set up Docker Buildx'
        if: steps.should_build.outputs.build == 'true'
        uses: docker/setup-buildx-action@v3

      - name: 'Install Cosign'
        if: steps.should_build.outputs.build == 'true'
        uses: sigstore/cosign-installer@v3

      - name: 'Login to Container Registry'
        if: steps.should_build.outputs.build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: 'Extract metadata'
        if: steps.should_build.outputs.build == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/devcontainer-${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 'Debug metadata'
        if: steps.should_build.outputs.build == 'true'
        run: |
          echo "::group::Generated Tags and Labels"
          echo "Tags:"
          echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n'
          echo ""
          echo "Labels:"
          echo '${{ steps.meta.outputs.labels }}'
          echo "::endgroup::"

      - name: 'Debug metadata'
        if: steps.should_build.outputs.build == 'true'
        run: |
          echo "::group::Generated Tags and Labels"
          echo "Tags:"
          echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n'
          echo ""
          echo "Labels:"
          echo '${{ steps.meta.outputs.labels }}'
          echo "::endgroup::"

      - name: 'Debug metadata'
        if: steps.should_build.outputs.build == 'true'
        run: |
          echo "::group::Generated Tags and Labels"
          echo "Tags:"
          echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n'
          echo ""
          echo "Labels:"
          echo '${{ steps.meta.outputs.labels }}'
          echo "::endgroup::"

      - name: 'Build and test image'
        if: steps.should_build.outputs.build == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./images/${{ matrix.image }}
          platforms: linux/amd64
          build-args: ${{ matrix.build_args }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            localhost/devcontainer-${{ matrix.image }}:test
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false
          load: true

      - name: 'Test image functionality'
        if: steps.should_build.outputs.build == 'true'
        run: |
          IMAGE_TAG="localhost/devcontainer-${{ matrix.image }}:test"

          case "${{ matrix.image }}" in
            ansible)
              docker run --rm $IMAGE_TAG ansible --version
              docker run --rm $IMAGE_TAG ansible-lint --version
              docker run --rm $IMAGE_TAG molecule --version
              ;;
            python)
              docker run --rm $IMAGE_TAG python --version
              docker run --rm $IMAGE_TAG pytest --version
              docker run --rm $IMAGE_TAG black --version
              docker run --rm $IMAGE_TAG bandit --version
              ;;
            terraform)
              docker run --rm $IMAGE_TAG terraform version
              docker run --rm $IMAGE_TAG terragrunt --version
              docker run --rm $IMAGE_TAG tflint --version
              docker run --rm $IMAGE_TAG checkov --version
              ;;
            go)
              docker run --rm $IMAGE_TAG go version
              docker run --rm $IMAGE_TAG golangci-lint --version
              docker run --rm $IMAGE_TAG gosec -version
              ;;
          esac

      - name: 'Run security scan'
        if: steps.should_build.outputs.build == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'localhost/devcontainer-${{ matrix.image }}:test'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.image }}.sarif'

      - name: 'Upload Trivy scan results'
        if: steps.should_build.outputs.build == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.image }}.sarif'

      - name: 'Push image'
        if: |
          steps.should_build.outputs.build == 'true' &&
          (github.ref == 'refs/heads/main' ||
           github.ref == 'refs/heads/develop' ||
           github.event.inputs.push_images == 'true')
        uses: docker/build-push-action@v6
        id: push
        with:
          context: ./images/${{ matrix.image }}
          platforms: linux/amd64,linux/arm64
          build-args: ${{ matrix.build_args }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true

      - name: 'Validate pushed images'
        if: |
          steps.should_build.outputs.build == 'true' &&
          (github.ref == 'refs/heads/main' ||
           github.ref == 'refs/heads/develop' ||
           github.event.inputs.push_images == 'true')
        run: |
          echo "🔍 Validando que las imágenes se han pusheado correctamente..."

          # Verificar cada tag
          for tag in $(echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n'); do
            if [[ -n "$tag" && "$tag" != " " ]]; then
              echo "Verificando: $tag"
              if docker manifest inspect "$tag" > /dev/null 2>&1; then
                echo "✅ $tag existe"
              else
                echo "❌ $tag no encontrado"
                exit 1
              fi
            fi
          done
          echo "✅ Todas las imágenes verificadas exitosamente"

      - name: 'Sign image with Cosign'
        if: |
          steps.should_build.outputs.build == 'true' &&
          (github.ref == 'refs/heads/main' ||
           github.ref == 'refs/heads/develop' ||
           github.event.inputs.push_images == 'true')
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "🔐 Firmando imagen con Cosign..."

          # Procesar tags de forma secuencial con delays para evitar race conditions
          TAGS=($(echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n'))
          TOTAL_TAGS=${#TAGS[@]}

          echo "📋 Total de tags a firmar: $TOTAL_TAGS"

          for i in "${!TAGS[@]}"; do
            tag="${TAGS[$i]}"
            if [[ -n "$tag" && "$tag" != " " ]]; then
              echo "📝 Firmando ($((i+1))/$TOTAL_TAGS): $tag"

              # Retry logic para manejo de errores transitorios
              for attempt in {1..3}; do
                if cosign sign --yes "$tag"; then
                  echo "✅ Firma exitosa para: $tag"
                  break
                else
                  echo "⚠️ Intento $attempt fallido para: $tag"
                  if [[ $attempt -eq 3 ]]; then
                    echo "❌ Error firmando $tag después de 3 intentos"
                    exit 1
                  fi
                  # Delay exponencial entre reintentos
                  sleep $((attempt * 2))
                fi
              done

              # Delay entre firmas para evitar sobrecarga del registry
              if [[ $((i+1)) -lt $TOTAL_TAGS ]]; then
                echo "⏳ Esperando 3 segundos antes de la siguiente firma..."
                sleep 3
              fi
            fi
          done

          # Si hay un digest específico, firmarlo también con la misma lógica
          if [[ -n "${{ steps.push.outputs.digest }}" ]]; then
            IMAGE_WITH_DIGEST="${{ env.REGISTRY }}/${{ github.repository }}/devcontainer-${{ matrix.image }}@${{ steps.push.outputs.digest }}"
            echo "📝 Firmando con digest: $IMAGE_WITH_DIGEST"

            for attempt in {1..3}; do
              if cosign sign --yes "$IMAGE_WITH_DIGEST"; then
                echo "✅ Firma con digest exitosa"
                break
              else
                echo "⚠️ Intento $attempt fallido para digest"
                if [[ $attempt -eq 3 ]]; then
                  echo "❌ Error firmando digest después de 3 intentos"
                  exit 1
                fi
                sleep $((attempt * 2))
              fi
            done
          fi

          echo "✅ Todas las imágenes firmadas exitosamente"

      - name: 'Generate and attest SBOM'
        if: |
          steps.should_build.outputs.build == 'true' &&
          (github.ref == 'refs/heads/main' ||
           github.ref == 'refs/heads/develop' ||
           github.event.inputs.push_images == 'true')
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "📋 Generando SBOM..."

          # Instalar syft si no está disponible
          if ! command -v syft &> /dev/null; then
            echo "🔧 Instalando syft..."
            curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          fi

          # Obtener todas las tags y procesar de forma secuencial
          TAGS=($(echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n'))

          # Usar el primer tag como referencia principal
          MAIN_TAG="${TAGS[0]}"
          echo "📋 Generando SBOM para imagen principal: $MAIN_TAG"

          # Generar SBOM una sola vez
          SBOM_FILE="sbom-${{ matrix.image }}.spdx.json"

          for attempt in {1..3}; do
            if syft "$MAIN_TAG" -o spdx-json="$SBOM_FILE"; then
              echo "✅ SBOM generado exitosamente"
              break
            else
              echo "⚠️ Intento $attempt fallido para generación de SBOM"
              if [[ $attempt -eq 3 ]]; then
                echo "❌ Error generando SBOM después de 3 intentos"
                exit 1
              fi
              sleep $((attempt * 2))
            fi
          done

          # Atestar SBOM para cada tag de forma secuencial
          echo "🔗 Atestando SBOM para todas las tags..."
          TOTAL_TAGS=${#TAGS[@]}

          for i in "${!TAGS[@]}"; do
            tag="${TAGS[$i]}"
            if [[ -n "$tag" && "$tag" != " " ]]; then
              echo "🔗 Atestando SBOM ($((i+1))/$TOTAL_TAGS): $tag"

              for attempt in {1..3}; do
                if cosign attest --yes --predicate "$SBOM_FILE" --type spdxjson "$tag"; then
                  echo "✅ SBOM atestado exitosamente para: $tag"
                  break
                else
                  echo "⚠️ Intento $attempt fallido para atestar SBOM en: $tag"
                  if [[ $attempt -eq 3 ]]; then
                    echo "❌ Error atestando SBOM en $tag después de 3 intentos"
                    exit 1
                  fi
                  sleep $((attempt * 2))
                fi
              done

              # Delay entre atestaciones
              if [[ $((i+1)) -lt $TOTAL_TAGS ]]; then
                echo "⏳ Esperando 2 segundos antes de la siguiente atestación..."
                sleep 2
              fi
            fi
          done

          echo "✅ SBOM generado y atestado para todas las tags"

  integration-tests:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Timeout de 10 minutos para tests de integración
    needs: [detect-changes, build-and-test]
    if: needs.detect-changes.outputs.any == 'true'

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Test Docker Compose setup'
        run: |
          # Create a test docker-compose.yml
          cat > docker-compose.test.yml << EOF
          version: '3.8'
          services:
            ansible-test:
              build: ./images/ansible
              command: ansible --version
            python-test:
              build: ./images/python
              command: python --version
            terraform-test:
              build: ./images/terraform
              command: terraform version
            go-test:
              build: ./images/go
              command: go version
          EOF

          # Test compose setup
          docker compose -f docker-compose.test.yml config

  notify:
    name: 'Notify Results'
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Timeout de 5 minutos para notificaciones
    needs: [detect-changes, build-and-test, integration-tests]
    if: always() && needs.detect-changes.outputs.any == 'true'

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Create build summary'
        run: |
          echo "## 🐳 DevContainer Images Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Image | Status | Changes Detected |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Ansible | ${{ needs.build-and-test.result }} | ${{ needs.detect-changes.outputs.ansible }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python | ${{ needs.build-and-test.result }} | ${{ needs.detect-changes.outputs.python }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform | ${{ needs.build-and-test.result }} | ${{ needs.detect-changes.outputs.terraform }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Go | ${{ needs.build-and-test.result }} | ${{ needs.detect-changes.outputs.go }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Build & Test**: ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration Tests**: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Built on: $(date)" >> $GITHUB_STEP_SUMMARY
